คุณคือ Senior Game Developer ผู้เชี่ยวชาญด้านภาษา Python และไลบรารี Pygame โดยมีประสบการณ์ในการพัฒนาเกม 2D คุณมีความสามารถในการเขียนโค้ดที่สะอาด (Clean Code) มีประสิทธิภาพสูง (Optimized) และปฏิบัติตามหลักการออกแบบเชิงวัตถุ (OOP) อย่างเคร่งครัด และคุณมีทักษะการเขียนเอกสารทางเทคนิค (Technical Writer) สามารถอธิบายโครงสร้างโค้ดและการทำงานของโปรแกรมได้อย่างชัดเจนและเป็นระบบ

ภารกิจหลักของคุณคือ พัฒนาเกม "Frogger" ที่สมบูรณ์แบบตามข้อกำหนดด้านล่างทั้งหมด พร้อมทั้งสร้างชุด Unit Test ที่ครอบคลุมการทำงานของเกม 100%

ข้อกำหนดทางเทคนิคคือ

ภาษาโปรแกรม: Python 3.11.9
ไลบรารีหลัก: Pygame (เวอร์ชันล่าสุดที่เข้ากันได้)
ไลบรารีสำหรับทดสอบ: Pytest

ส่วนที่ 1 การพัฒนาเกม Frogger (frogger.py)
1. โครงสร้างโปรเจกต์และสถาปัตยกรรม
การออกแบบเชิงวัตถุ (OOP): ให้สร้างคลาส (Class) แยกสำหรับแต่ละส่วนประกอบของเกมอย่างชัดเจน

การจัดการค่าคงที่คือ สร้างไฟล์ settings.py หรือส่วนที่แยกต่างหากใน frogger.py เพื่อเก็บค่าคงที่ทั้งหมด เพื่อให้ง่ายต่อการปรับแก้ในอนาคต

2. ข้อกำหนดด้านหน้าจอและ UI (User Interface)
ขนาดหน้าจอ: 800 x 600 พิกเซล
Layout:
Safe Zone (ล่างสุด): พื้นที่เริ่มต้นสำหรับกบ
Road Zone (ครึ่งล่าง): 5 เลนสำหรับรถยนต์ วิ่งสลับทิศทางกัน
Median Strip (ตรงกลาง): แถบปลอดภัยคั่นกลางระหว่างถนนและแม่น้ำ
River Zone (ครึ่งบน): 5 เลนสำหรับขอนไม้และเต่า
Home Zone (บนสุด): พื้นที่เป้าหมายที่มี "บ้าน" ว่าง 5 ช่อง
Heads-Up Display (HUD): แสดงข้อมูลสำคัญบนหน้าจอให้ชัดเจน:
Lives: จำนวนชีวิตที่เหลือ (แสดงเป็นไอคอนรูปกบ)
Score: คะแนนที่ผู้เล่นทำได้
Time: แถบเวลาที่ลดลงอย่างต่อเนื่อง
Level: ระดับด่านปัจจุบัน

3. กลไกการเล่น (Gameplay Mechanics) - รายละเอียดเชิงลึก
การควบคุมผู้เล่น:
ใช้ pygame.KEYDOWN และ event.key สำหรับการควบคุม
การกดปุ่มลูกศร (ขึ้น, ลง, ซ้าย, ขวา) จะทำให้กบกระโดดเป็นระยะทางคงที่ (เช่น 40 พิกเซล) และต้องกระโดดให้อยู่ในกรอบของหน้าจอ
ยานพาหนะ (Vehicles):
สร้างยานพาหนะอย่างน้อย 3 ประเภทที่มีขนาดและความเร็วต่างกัน
ยานพาหนะในแต่ละเลนควรมีทิศทางการเคลื่อนที่และความเร็วที่กำหนดไว้ เมื่อเคลื่อนที่จนสุดจอ ให้วนกลับมาปรากฏที่อีกฝั่งหนึ่ง
แพลตฟอร์มในแม่น้ำ (Logs & Turtles):
การเคลื่อนที่ตามแพลตฟอร์ม: เมื่อกบอยู่บนขอนไม้หรือเต่า กบจะต้องเคลื่อนที่ตามแพลตฟอร์มนั้นๆ ไปด้วย (Player's X position should update based on the platform's movement)

เงื่อนไขการตาย (Death Conditions):
ถูกยานพาหนะชน
ตกลงไปในแม่น้ำ (ไม่ได้อยู่บนขอนไม้หรือเต่า)
กระโดดออกนอกขอบเขตของหน้าจอ
เวลาในแถบเวลาหมดลง
การนับคะแนนและชีวิต:
ชีวิตเริ่มต้น: 5 ชีวิต
การได้คะแนน:
+10 คะแนน สำหรับการกระโดดไปข้างหน้า 1 ครั้ง
+50 คะแนน เมื่อพากบเข้าบ้านสำเร็จ 1 ตัว
+1,000 คะแนนโบนัส เมื่อพากบเข้าบ้านครบ 5 ตัว
การเสียชีวิต: เมื่อตาย จะเสีย 1 ชีวิต และกบจะกลับไปที่จุดเริ่มต้น
การผ่านด่าน:
เมื่อพากบเข้าบ้านครบทั้ง 5 ช่อง จะถือว่าผ่านด่าน
เกมจะรีเซ็ตหน้าจอ, กบกลับไปที่จุดเริ่มต้น และความเร็วของสิ่งกีดขวางทั้งหมดจะเพิ่มขึ้น 10% สำหรับด่านถัดไป
สถานะของเกม (Game States):
Start Screen: หน้าจอแรกที่แสดงชื่อเกมและข้อความ "Press Enter to Start"
Game Over Screen: หน้าจอที่ปรากฏเมื่อชีวิตหมด แสดงคะแนนสุดท้ายและข้อความ "Game Over - Press Enter to Restart"

4. ทรัพยากร (Assets)
เนื่องจากคุณไม่สามารถสร้างไฟล์ภาพได้ ให้ใช้ pygame.draw เพื่อวาดรูปทรงเรขาคณิตแทนอ็อบเจกต์ต่างๆ และใช้สีที่แตกต่างกันเพื่อแยกแยะอย่างชัดเจน
ใช้ pygame.font เพื่อแสดงข้อความทั้งหมดบนหน้าจอ

ส่วนที่ 2: การทดสอบโปรแกรม (test_frogger.py)
คุณจะต้องเขียน Unit Tests โดยใช้ pytest เพื่อทดสอบ Logic ของเกมใน frogger.py โดยมีเป้าหมายให้ Statement Coverage ถึง 100%

1. การตั้งค่า (Setup)
ใช้ pytest.fixture เพื่อสร้าง instance ของคลาสต่างๆ (เช่น Player, Vehicle) ที่จะใช้ในการทดสอบแต่ละครั้ง เพื่อให้การทดสอบเป็นอิสระต่อกัน
2. ขอบเขตการทดสอบ (Test Cases)
ให้ครอบคลุมกรณีการทดสอบต่อไปนี้เป็นอย่างน้อย:

Player Class:
ทดสอบการเคลื่อนที่ทั้ง 4 ทิศทาง ว่าตำแหน่ง (coordinates) เปลี่ยนแปลงถูกต้องหรือไม่
ทดสอบการจำกัดขอบเขตการเคลื่อนที่ ไม่ให้ผู้เล่นกระโดดออกนอกจอ
ทดสอบฟังก์ชันการรีเซ็ตตำแหน่งของผู้เล่น
Collision Detection Logic:
ทดสอบกรณีที่ผู้เล่น ชน กับรถยนต์ (ควรคืนค่า True)
ทดสอบกรณีที่ผู้เล่น ไม่ชน กับรถยนต์ (ควรคืนค่า False)
ทดสอบกรณีที่ผู้เล่น อยู่บน แพลตฟอร์ม (ขอนไม้/เต่า)
ทดสอบกรณีที่ผู้เล่น ตกน้ำ (ไม่ได้อยู่บนแพลตฟอร์มในโซนแม่น้ำ)
Game Logic:
ทดสอบการลดจำนวนชีวิตเมื่อผู้เล่นตาย
ทดสอบการเพิ่มคะแนนเมื่อผู้เล่นเคลื่อนที่ไปข้างหน้าและเมื่อเข้าบ้านสำเร็จ
ทดสอบการรีเซ็ตสถานะของเกมเมื่อผ่านด่าน
ทดสอบการเปลี่ยนสถานะของเกมจาก "Playing" เป็น "Game Over" เมื่อชีวิตหมด
Obstacle/Platform Movement:
ทดสอบว่าตำแหน่งของยานพาหนะและแพลตฟอร์มมีการอัปเดตอย่างถูกต้องในแต่ละเฟรม
ทดสอบการวนลูปของอ็อบเจกต์เมื่อเคลื่อนที่ตกขอบจอ
ส่วนที่ 3: เอกสารประกอบ
ในส่วนท้ายของไฟล์ frogger.py ให้ใส่ Docstring ในระดับ Module (Module-level Docstring) ที่อธิบายภาพรวมของเกม และในไฟล์ test_frogger.py ให้ใส่ Docstring ที่อธิบายวัตถุประสงค์ของไฟล์ทดสอบ นอกจากนี้ ทุกคลาสและฟังก์ชันที่คุณสร้างจะต้องมี Docstring ที่อธิบายหน้าที่, พารามิเตอร์, และค่าที่คืนกลับ (ถ้ามี) อย่างชัดเจนตามมาตรฐาน PEP 257

คำสั่งสุดท้าย: โปรดลงมือเขียนโค้ดสำหรับไฟล์ frogger.py และ test_frogger.py ตามข้อกำหนดทั้งหมดนี้อย่างเคร่งครัด เพื่อให้ได้ผลงานที่มีคุณภาพสูงสุด