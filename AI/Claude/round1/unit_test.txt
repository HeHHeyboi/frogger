"""
Unit Tests for Frogger Game
===========================

ทดสอบทุกส่วนของเกม Frogger เพื่อให้ได้ 100% statement coverage
ใช้ pytest framework และ unittest.mock สำหรับ mocking pygame
"""

import pytest
import pygame
from unittest.mock import Mock, patch, MagicMock
import sys
import os

# เพิ่ม path เพื่อ import frogger
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from frogger import (
    FroggerGame, Frog, Vehicle, Log, Turtle, Home, GameObject, 
    Direction, Colors, GameState, SCREEN_WIDTH, SCREEN_HEIGHT, GRID_SIZE
)

class TestColors:
    """ทดสอบ class Colors"""
    
    def test_colors_exist(self):
        """ทดสอบว่าสีต่างๆ ถูกกำหนดไว้"""
        assert Colors.BLACK == (0, 0, 0)
        assert Colors.WHITE == (255, 255, 255)
        assert Colors.GREEN == (0, 255, 0)
        assert Colors.BLUE == (0, 0, 255)
        assert Colors.RED == (255, 0, 0)
        assert Colors.YELLOW == (255, 255, 0)
        assert Colors.BROWN == (139, 69, 19)
        assert Colors.GRAY == (128, 128, 128)
        assert Colors.DARK_GREEN == (0, 128, 0)
        assert Colors.LIGHT_BLUE == (173, 216, 230)

class TestDirection:
    """ทดสอบ enum Direction"""
    
    def test_direction_values(self):
        """ทดสอบค่าทิศทางต่างๆ"""
        assert Direction.UP.value == (0, -1)
        assert Direction.DOWN.value == (0, 1)
        assert Direction.LEFT.value == (-1, 0)
        assert Direction.RIGHT.value == (1, 0)

class TestGameObject:
    """ทดสอบ class GameObject พื้นฐาน"""
    
    def test_game_object_init(self):
        """ทดสอบการสร้าง GameObject"""
        obj = GameObject(10, 20, 30, 40, Colors.RED)
        assert obj.x == 10
        assert obj.y == 20
        assert obj.width == 30
        assert obj.height == 40
        assert obj.color == Colors.RED
        assert obj.rect.x == 10
        assert obj.rect.y == 20
        assert obj.rect.width == 30
        assert obj.rect.height == 40
    
    def test_update_rect(self):
        """ทดสอบการอัปเดต rect"""
        obj = GameObject(10, 20, 30, 40, Colors.RED)
        obj.x = 50
        obj.y = 60
        obj.update_rect()
        assert obj.rect.x == 50
        assert obj.rect.y == 60
    
    @patch('pygame.draw.rect')
    def test_draw(self, mock_draw):
        """ทดสอบการวาดวัตถุ"""
        obj = GameObject(10, 20, 30, 40, Colors.RED)
        mock_screen = Mock()
        obj.draw(mock_screen)
        mock_draw.assert_called_once_with(mock_screen, Colors.RED, obj.rect)
    
    def test_get_center(self):
        """ทดสอบการหาจุดกึ่งกลาง"""
        obj = GameObject(10, 20, 30, 40, Colors.RED)
        center = obj.get_center()
        assert center == (25, 40)  # (10 + 30//2, 20 + 40//2)

class TestFrog:
    """ทดสอบ class Frog"""
    
    def test_frog_init(self):
        """ทดสอบการสร้างกบ"""
        frog = Frog(100, 200)
        assert frog.x == 100
        assert frog.y == 200
        assert frog.start_x == 100
        assert frog.start_y == 200
        assert frog.width == GRID_SIZE - 4
        assert frog.height == GRID_SIZE - 4
        assert frog.color == Colors.GREEN
        assert frog.on_log is False
        assert frog.log_speed == 0
    
    def test_frog_move_valid(self):
        """ทดสอบการเคลื่อนที่ในขอบเขตที่ถูกต้อง"""
        frog = Frog(100, 200)
        
        # ทดสอบการเคลื่อนที่ทุกทิศทาง
        result = frog.move(Direction.UP)
        assert result is True
        assert frog.y == 200 - GRID_SIZE
        
        result = frog.move(Direction.DOWN)
        assert result is True
        assert frog.y == 200
        
        result = frog.move(Direction.LEFT)
        assert result is True
        assert frog.x == 100 - GRID_SIZE
        
        result = frog.move(Direction.RIGHT)
        assert result is True
        assert frog.x == 100
    
    def test_frog_move_invalid(self):
        """ทดสอบการเคลื่อนที่นอกขอบเขต"""
        # ทดสอบขอบซ้าย
        frog = Frog(0, 100)
        result = frog.move(Direction.LEFT)
        assert result is False
        assert frog.x == 0
        
        # ทดสอบขอบขวา
        frog = Frog(SCREEN_WIDTH - frog.width, 100)
        result = frog.move(Direction.RIGHT)
        assert result is False
        
        # ทดสอบขอบบน
        frog = Frog(100, 0)
        result = frog.move(Direction.UP)
        assert result is False
        assert frog.y == 0
        
        # ทดสอบขอบล่าง
        frog = Frog(100, SCREEN_HEIGHT - frog.height)
        result = frog.move(Direction.DOWN)
        assert result is False
    
    def test_frog_reset_position(self):
        """ทดสอบการรีเซ็ตตำแหน่ง"""
        frog = Frog(100, 200)
        frog.move(Direction.UP)
        frog.on_log = True
        frog.log_speed = 5
        
        frog.reset_position()
        assert frog.x == 100
        assert frog.y == 200
        assert frog.on_log is False
        assert frog.log_speed == 0
    
    def test_frog_update_on_log(self):
        """ทดสอบการอัปเดตตำแหน่งบนขอนไม้"""
        frog = Frog(100, 200)
        frog.on_log = True
        
        # ทดสอบการเคลื่อนที่ปกติ
        frog.update_on_log(5)
        assert frog.x == 105
        
        # ทดสอบขอบซ้าย
        frog.x = -10
        frog.update_on_log(-5)
        assert frog.x == 0
        
        # ทดสอบขอบขวา
        frog.x = SCREEN_WIDTH
        frog.update_on_log(5)
        assert frog.x == SCREEN_WIDTH - frog.width
        
        # ทดสอบเมื่อไม่ได้อยู่บนขอนไม้
        frog.on_log = False
        old_x = frog.x
        frog.update_on_log(10)
        assert frog.x == old_x  # ไม่เปลี่ยนแปลง

class TestVehicle:
    """ทดสอบ class Vehicle"""
    
    def test_vehicle_init(self):
        """ทดสอบการสร้างยานพาหนะ"""
        vehicle = Vehicle(50, 100, 3, Colors.RED)
        assert vehicle.x == 50
        assert vehicle.y == 100
        assert vehicle.speed == 3
        assert vehicle.color == Colors.RED
        assert vehicle.width == GRID_SIZE + 10
        assert vehicle.height == GRID_SIZE - 10
    
    def test_vehicle_update_move_right(self):
        """ทดสอบการอัปเดตยานพาหนะเคลื่อนที่ขวา"""
        vehicle = Vehicle(50, 100, 3, Colors.RED)
        vehicle.update()
        assert vehicle.x == 53
        
        # ทดสอบการวนกลับเมื่อออกจากหน้าจอ
        vehicle.x = SCREEN_WIDTH + 1
        vehicle.update()
        assert vehicle.x == -vehicle.width
    
    def test_vehicle_update_move_left(self):
        """ทดสอบการอัปเดตยานพาหนะเคลื่อนที่ซ้าย"""
        vehicle = Vehicle(50, 100, -3, Colors.RED)
        vehicle.update()
        assert vehicle.x == 47
        
        # ทดสอบการวนกลับเมื่อออกจากหน้าจอ
        vehicle.x = -vehicle.width - 1
        vehicle.update()
        assert vehicle.x == SCREEN_WIDTH

class TestLog:
    """ทดสอบ class Log"""
    
    def test_log_init(self):
        """ทดสอบการสร้างขอนไม้"""
        log = Log(50, 100, 2, 3)
        assert log.x == 50
        assert log.y == 100
        assert log.speed == 2
        assert log.length == 3
        assert log.width == 3 * GRID_SIZE
        assert log.height == GRID_SIZE - 10
        assert log.color == Colors.BROWN
    
    def test_log_init_default_length(self):
        """ทดสอบการสร้างขอนไม้ด้วยความยาวเริ่มต้น"""
        log = Log(50, 100, 2)
        assert log.length == 2
        assert log.width == 2 * GRID_SIZE
    
    def test_log_update_move_right(self):
        """ทดสอบการอัปเดตขอนไม้เคลื่อนที่ขวา"""
        log = Log(50, 100, 2)
        log.update()
        assert log.x == 52
        
        # ทดสอบการวนกลับ
        log.x = SCREEN_WIDTH + 1
        log.update()
        assert log.x == -log.width
    
    def test_log_update_move_left(self):
        """ทดสอบการอัปเดตขอนไม้เคลื่อนที่ซ้าย"""
        log = Log(50, 100, -2)
        log.update()
        assert log.x == 48
        
        # ทดสอบการวนกลับ
        log.x = -log.width - 1
        log.update()
        assert log.x == SCREEN_WIDTH

class TestTurtle:
    """ทดสอบ class Turtle"""
    
    @patch('random.randint')
    def test_turtle_init(self, mock_randint):
        """ทดสอบการสร้างเต่า"""
        mock_randint.return_value = 240
        turtle = Turtle(50, 100, 1)
        assert turtle.x == 50
        assert turtle.y == 100
        assert turtle.speed == 1
        assert turtle.width == GRID_SIZE
        assert turtle.height == GRID_SIZE - 10
        assert turtle.color == Colors.DARK_GREEN
        assert turtle.dive_timer == 240
        assert turtle.is_diving is False
        assert turtle.dive_duration == 60
    
    @patch('random.randint')
    def test_turtle_update_movement(self, mock_randint):
        """ทดสอบการอัปเดตการเคลื่อนที่ของเต่า"""
        mock_randint.return_value = 240
        turtle = Turtle(50, 100, 2)
        turtle.update()
        assert turtle.x == 52
        
        # ทดสอบการวนกลับ (เคลื่อนที่ขวา)
        turtle.x = SCREEN_WIDTH + 1
        turtle.update()
        assert turtle.x == -turtle.width
        
        # ทดสอบการวนกลับ (เคลื่อนที่ซ้าย)
        turtle.speed = -2
        turtle.x = -turtle.width - 1
        turtle.update()
        assert turtle.x == SCREEN_WIDTH
    
    @patch('random.randint')
    def test_turtle_diving_mechanism(self, mock_randint):
        """ทดสอบกลไกการดำน้ำของเต่า"""
        mock_randint.return_value = 300
        turtle = Turtle(50, 100, 1)
        
        # ทดสอบการเริ่มดำน้ำ
        turtle.dive_timer = 1
        turtle.update()
        assert turtle.is_diving is True
        assert turtle.dive_timer == 60
        
        # ทดสอบการหยุดดำน้ำ
        turtle.dive_timer = 1
        turtle.update()
        assert turtle.is_diving is False
        assert turtle.dive_timer == 300
    
    @patch('pygame.draw.rect')
    def test_turtle_draw_normal(self, mock_draw):
        """ทดสอบการวาดเต่าในสถานะปกติ"""
        turtle = Turtle(50, 100, 1)
        turtle.is_diving = False
        mock_screen = Mock()
        turtle.draw(mock_screen)
        mock_draw.assert_called_once()
    
    @patch('pygame.draw.rect')
    def test_turtle_draw_diving(self, mock_draw):
        """ทดสอบการวาดเต่าขณะดำน้ำ"""
        turtle = Turtle(50, 100, 1)
        turtle.is_diving = True
        mock_screen = Mock()
        turtle.draw(mock_screen)
        mock_draw.assert_not_called()

class TestHome:
    """ทดสอบ class Home"""
    
    def test_home_init(self):
        """ทดสอบการสร้างบ้าน"""
        home = Home(100, 200)
        assert home.x == 100
        assert home.y == 200
        assert home.width == GRID_SIZE
        assert home.height == GRID_SIZE
        assert home.color == Colors.YELLOW
        assert home.occupied is False
    
    @patch('pygame.draw.rect')
    def test_home_draw_empty(self, mock_draw):
        """ทดสอบการวาดบ้านที่ว่าง"""
        home = Home(100, 200)
        mock_screen = Mock()
        home.draw(mock_screen)
        
        # ตรวจสอบการเรียก draw 2 ครั้ง (พื้นหลัง + กรอบ)
        assert mock_draw.call_count == 2
        # ครั้งแรกควรเป็นสีเหลือง (บ้านว่าง)
        first_call = mock_draw.call_args_list[0]
        assert first_call[0][1] == Colors.YELLOW
    
    @patch('pygame.draw.rect')
    def test_home_draw_occupied(self, mock_draw):
        """ทดสอบการวาดบ้านที่มีกบอยู่"""
        home = Home(100, 200)
        home.occupied = True
        mock_screen = Mock()
        home.draw(mock_screen)
        
        # ตรวจสอบการเรียก draw 2 ครั้ง
        assert mock_draw.call_count == 2
        # ครั้งแรกควรเป็นสีเขียว (บ้านที่มีกบ)
        first_call = mock_draw.call_args_list[0]
        assert first_call[0][1] == Colors.GREEN

class TestGameState:
    """ทดสอบ class GameState"""
    
    def test_game_state_init(self):
        """ทดสอบการสร้าง GameState"""